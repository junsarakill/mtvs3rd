// Fill out your copyright notice in the Description page of Project Settings.


#include "PSH/PSH_Mtvs3rdGameModBase.h"
#include "PSH_TsetJsonParseLib.h"
#include "PSH/PSH_HttpDataTable.h"
#include "HttpModule.h"
#include "Kismet/GameplayStatics.h"
#include "JBS/BS_PlayerState.h"
#include "PSH/PSH_GameInstance.h"
#include "PSH/PSH_LastChoiceWidget.h"


APSH_Mtvs3rdGameModBase::APSH_Mtvs3rdGameModBase()
{
	//PlayerStateClass = ABS_PlayerState::StaticClass();
}

void APSH_Mtvs3rdGameModBase::BeginPlay()
{
	Super::BeginPlay();

	Gi = Cast<UPSH_GameInstance>(GetGameInstance());

// 	auto * pc = GetWorld()->GetFirstPlayerController();
// 	if (pc)
// 	{
// 		playerState = Cast<ABS_PlayerState>(pc->PlayerState);
// 	}
	
	ChoiceNum.Init(0, 5); // 플레이어 수만큼 만들기로 변경.
	
}

// void APSH_Mtvs3rdGameModBase::PreLogin(const FString &Options, const FString &Address, const FUniqueNetIdRepl &UniqueId, FString &ErrorMessage)
// {
// //     서버에 접근 시도중인 플레이어를 수락 또는 거부합니다
// //         .ErrorMessage 에 공백이 아닌 스트링을 입력하면 Login 함수가 실패하도록 만듭니다.PreLogin 은 Login 전 호출되며,
// //         참가하는 플레이어가 게임 콘텐츠를 다운로드해야 하는 경우 시간이 한참 지나서야 Login 이 호출될 수도 있습니다.
// }

void APSH_Mtvs3rdGameModBase::PostLogin(APlayerController *NewPlayer) 
{
    Super::PostLogin(NewPlayer);
    Gi = Cast<UPSH_GameInstance>(GetGameInstance());
	// 새로 들어온 플레이어에게 GI에 있는 데이터를 넣어주고 싶다.
    auto *pc = NewPlayer;
    if (pc)
    {
        playerState = Cast<ABS_PlayerState>(pc->PlayerState);
        if (playerState != nullptr)
        {
            playerState->SetPlayerData(Gi->GetStartData());
        }
    }
	
    //     로그인 성공 이후 호출됩니다.PlayerController 에서 리플리케이트되는 함수 호출을 하기에 안전한 첫 번째
//         장소입니다.블루프린트로 OnPostLogin 을 구현하여 부가 로직을 추가할 수 있습니다.

}

void APSH_Mtvs3rdGameModBase::SetData(FPSH_HttpDataTable Data)
{
	PlayerData = Data;
}


void APSH_Mtvs3rdGameModBase::LastChoice(int FromId, int ToId) // 4번 불린다. 갱신 가능. // 누가 , 누구를
{

	// 시연 용 ( 프로토)
	//ChoiceWidget->
	

	// 최종 선택 판별

	// 각 id 를 저장
	//ChoiceWidget->SetData(PlayerData);
	
	
	ChoiceNum[FromId] = ToId; // 사전에 플레이어의 수만큼 만들어놓은 배열에 상대의 ID 를 집어 넣음

	LastChoiceNum++; // 함수 실행 횟수 체크

	if (LastChoiceNum < playerCount || ChoiceWidget == nullptr) // 테스트 현재 플레이어 수 현재 2
	{
		return;
	}

	ChekChoice();
	
	// for문을 돌리면서 Toid
	// 미리 만들어 놓고 비교
	// 각 id 를 비교
	
	// 같으면 성공 UI
	

	// 틀리면 실패 UI
	//

}

FPSH_HttpDataTable APSH_Mtvs3rdGameModBase::GetData(int num)
{
	return Gi->GetData(num);
}

void APSH_Mtvs3rdGameModBase::ChekChoice() // 현재는 2명으로 구현되어 있음 4명일 때 UI 어떻게 보여줘야 하는지 잘 모르겠어서 추후 수정
{
	if (ChoiceWidget)
	{
		for (int i = 1; i < 3; i++)  // 전체 확인을 했기 때문에 3명을 검사 할 필요가 없다.
		{
			
			if (ChoiceNum[i] == 0) // 플레이어를 선택 안했거나 플레이어가 아님
			{
				continue;
			}
			else
			{		// 플레이어 번호 = 3 / 1
					// 1 2 3 4  /1     arr[1]
				if ( i == ChoiceNum[ChoiceNum[i]]) // 남자 1번과 누군가 자신을 선택했는지
				{
					ChoiceWidget->SuccessChoice();
				}
				else
				{
					ChoiceWidget->FailChoice();
				}
			}
		}
	}
}

void APSH_Mtvs3rdGameModBase::SetLastWdiget(class UPSH_LastChoiceWidget* widget)
{
	ChoiceWidget = widget;
}

//  시작중 UI 적용
void APSH_Mtvs3rdGameModBase::QestButtonJson(int ButtonNum , int QestNum, int playerID)
{
	TMap<FString, FString> QestData; // 제이슨에 들어갈 데이터
	QestData.Add("playerID", FString::FromInt(playerID)); // 어떤 플레이어가
	QestData.Add("QestNum", FString::FromInt(QestNum)); // 몇번째 퀘스트에
	QestData.Add("Answer", FString::FromInt(ButtonNum)); // 몇번을 눌렀는지
	
	// 내가 누구인지. id
	// 버튼 무엇을 눌렀는지. button Num
	// 몇번째 퀘스트인지  Qest Num
	TestScore += 5;
	PlayerData.otherUserID1 = 3;
	PlayerData.syncPercentID1 = TestScore;

	Gi->SetStartData(PlayerData);
	FString json = UPSH_TsetJsonParseLib::MakeJson(QestData);

//	ReqPost(json, URLScore); // 만든 제이슨 보내주는거
}

